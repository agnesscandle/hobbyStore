<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kh.mvc.hobby.model.mapper.HobbyMapper">

	<sql id="HobbyListSql">
		SELECT HB_NO,
		MER_NO,
		CATE_NO,
		HB_TITLE,
		HB_SUMMARY,
		HB_STARTDATE,
		HB_FEE,
		HB_DISCOUNT_RATE,
		HB_DISCOUNT_STATUS,
		HB_ENDDATE,
		HB_IMGS_ORI,
		HB_IMGS_RENAME,
		HB_THUM_ORI,
		HB_THUM_RENAME,
		HB_INFO,
		HB_LOCATION
		FROM HOBBY
		WHERE
		STATUS = 'Y'
	</sql>

	<sql id="cateListSql">
		SELECT
		CATE_NO,
		CATE_NAME
		FROM
		CATEGORY
	</sql>

	<sql id="ReviewListSql">
		SELECT R.RV_NO,
		R.HB_NO,
		R.MEM_NO,
		M.MEM_NAME,
		M.MEM_IMG_RENAME,
		R.RV_SCORE,
		R.RV_CONTENT,
		R.RV_CREATEDATE,
		R.RV_MODIFYDATE,
		R.GOOD_REVIEW,
		R.RV_ORIGINAL_FILENAME,
		R.RV_RENAME_FILENAME
		FROM REVIEW R
		JOIN MEMBER M ON(R.MEM_NO = M.MEM_NO)
		WHERE R.STATUS = 'Y'
	</sql>

	<select id="selectReserveCount" parameterType="map"
		resultType="_int">
		SELECT COUNT(*)
		FROM RESERVATION
		WHERE HB_NO = ${hbNo}
		AND
		MEM_NO = ${memNo}
	</select>


	<select id="selectReviewByNo" parameterType="_int"
		resultMap="ReviewListResultMap">
		<include refid="ReviewListSql" />
		AND R.MEM_NO = ${memNo}
	</select>

	<resultMap type="Hobby" id="HobbyListResultMap">
		<id property="hbNo" column="HB_NO" />
		<result property="merNo" column="MER_NO" />
		<result property="cateNo" column="CATE_NO" />
		<result property="cateName" column="CATE_NAME" />
		<result property="hbTitle" column="HB_TITLE" />
		<result property="hbSummary" column="HB_SUMMARY" />
		<result property="hbFee" column="HB_FEE" />
		<result property="hbDiscountRate" column="HB_DISCOUNT_RATE" />
		<result property="hbDiscountStatus" column="HB_DISCOUNT_STATUS" />
		<result property="hbStartDate" column="HB_STARTDATE" />
		<result property="hbEndDate" column="HB_ENDDATE" />
		<result property="hbImgsOri" column="HB_IMGS_ORI" />
		<result property="hbImgsRename" column="HB_IMGS_RENAME" />
		<result property="hbThumOri" column="HB_THUM_ORI" />
		<result property="hbThumRename" column="HB_THUM_RENAME" />
		<result property="hbInfo" column="HB_INFO" />
		<result property="hbLocation" column="HB_LOCATION" />
	</resultMap>

	<resultMap type="Review" id="ReviewListResultMap">
		<id property="rvNo" column="RV_NO" />
		<result property="hbNo" column="HB_NO" />
		<result property="memNo" column="MEM_NO" />
		<result property="memName" column="MEM_NAME" />
		<result property="memImgRename" column="MEM_IMG_RENAME" />
		<result property="rvScore" column="RV_SCORE" />
		<result property="rvContent" column="RV_CONTENT" />
		<result property="rvCreateDate" column="RV_CREATEDATE" />
		<result property="rvModifyDate" column="RV_MODIFYDATE" />
		<result property="goodReview" column="GOOD_REVIEW" />
		<result property="rvOriginalFilename"
			column="RV_ORIGINAL_FILENAME" />
		<result property="rvRenameFilename" column="RV_RENAME_FILENAME" />
	</resultMap>

	<resultMap type="Category" id="CateListResultMap">
		<id property="cateNo" column="CATE_NO" />
		<result property="cateName" column="CATE_NAME" />
	</resultMap>

	<select id="selectCateList" parameterType="map"
		resultMap="CateListResultMap">

		<include refid="cateListSql" />

		ORDER BY CATE_NO DESC
	</select>


	<select id="selectHobbyList" parameterType="map"
		resultMap="HobbyListResultMap">

		SELECT H.HB_NO,
		H.MER_NO,
		H.CATE_NO,
		C.CATE_NAME,
		H.HB_TITLE,
		H.HB_SUMMARY,
		H.HB_STARTDATE,
		H.HB_FEE,
		H.HB_DISCOUNT_RATE,
		H.HB_DISCOUNT_STATUS,
		H.HB_ENDDATE,
		H.HB_IMGS_ORI,
		H.HB_IMGS_RENAME,
		H.HB_THUM_ORI,
		H.HB_THUM_RENAME,
		H.HB_INFO,
		H.HB_LOCATION
		FROM HOBBY H
		JOIN CATEGORY C ON(H.CATE_NO = C.CATE_NO)
		WHERE H.STATUS = 'Y'

		ORDER BY
		H.HB_NO DESC

	</select>

	<select id="getHobbySearchList" parameterType="map"
		resultMap="HobbyListResultMap">

		SELECT H.HB_NO,
		H.MER_NO,
		H.CATE_NO,
		C.CATE_NAME,
		H.HB_TITLE,
		H.HB_SUMMARY,
		H.HB_STARTDATE,
		H.HB_FEE,
		H.HB_DISCOUNT_RATE,
		H.HB_DISCOUNT_STATUS,
		H.HB_ENDDATE,
		H.HB_IMGS_ORI,
		H.HB_IMGS_RENAME,
		H.HB_THUM_ORI,
		H.HB_THUM_RENAME,
		H.HB_INFO,
		H.HB_LOCATION
		FROM HOBBY H
		JOIN CATEGORY C ON(H.CATE_NO = C.CATE_NO)
		WHERE H.STATUS = 'Y'
		AND
		H.HB_TITLE LIKE '%' || #{search} || '%'

		ORDER BY H.HB_NO DESC

	</select>

	<select id="selectReviewList" parameterType="_int"
		resultMap="ReviewListResultMap">
		<include refid="ReviewListSql" />
		AND R.HB_NO = ${hbNo}
		ORDER BY R.RV_NO DESC
	</select>


	<select id="selectHobbySearchCount" parameterType="String"
		resultType="_int">
		SELECT COUNT(*)
		FROM HOBBY
		WHERE STATUS='Y'
		AND HB_TITLE LIKE
		'%' || #{search} || '%'
	</select>

	<select id="selectHobbyCount" parameterType="map"
		resultType="_int">
		SELECT COUNT(*)
		FROM HOBBY
		WHERE STATUS='Y'
	</select>


	<select id="selectReviewCount" parameterType="_int"
		resultType="_int">
		SELECT COUNT(*)
		FROM REVIEW
		WHERE STATUS='Y'
		AND HB_NO =
		${hbNo}
	</select>

	<select id="selectHobbyByNo" parameterType="_int"
		resultMap="HobbyListResultMap">
		<include refid="HobbyListSql" />
		AND HB_NO=#{hbNo}
	</select>


	<insert id="insertHobby" parameterType="map"
		useGeneratedKeys="true" keyProperty="hbNo" keyColumn="HB_NO">
		INSERT INTO
		HOBBY(
		HB_NO,
		MER_NO,
		CATE_NO,
		HB_TITLE,
		HB_FEE,
		HB_DISCOUNT_RATE,
		HB_DISCOUNT_STATUS,
		HB_SUMMARY,
		HB_STARTDATE,
		HB_ENDDATE,
		HB_IMGS_ORI,
		HB_IMGS_RENAME,
		HB_THUM_ORI,
		HB_THUM_RENAME,
		HB_INFO,
		HB_LOCATION,
		STATUS
		)
		VALUES(
		SEQ_HOBBY_NO.NEXTVAL,
		1,
		#{cateNo},
		#{hbTitle},
		TO_NUMBER(#{hbFee}),
		TO_NUMBER(#{hbDiscountRate}),
		#{hbDiscountStatus},
		#{hbSummary},
		TO_DATE(#{hbStartDate},'YYYY-MM-DD'),
		TO_DATE(#{hbEndDate},'YYYY-MM-DD'),
		#{hbImgsOri},
		#{hbImgsRename},
		#{hbThumOri},
		#{hbThumRename},
		#{hbInfo},
		#{hbLocation},
		'Y'
		)
	</insert>


	<!-- 좋아요 -->
	<select id="selectLikedStatusByNo" parameterType="hashMap"
		resultType="String">
		SELECT STATUS FROM LIKED
		WHERE HB_NO = #{hbNo} AND MEM_NO =
		#{memNo}
	</select>


	<insert id="insertLiked" parameterType="map"
		useGeneratedKeys="true" keyProperty="likedNo" keyColumn="LIKE_NO">

		INSERT INTO
		LIKED(
		LIKE_NO,
		HB_NO,
		MEM_NO,
		STATUS
		) VALUES (
		SEQ_LIKE_SEQ.NEXTVAL,
		#{hbNo},
		#{memNo},
		DEFAULT
		)
	</insert>

	<update id="updateLiked" parameterType="hashMap">
		UPDATE LIKED
		SET
		STATUS='Y'
		WHERE HB_NO = #{hbNo} AND MEM_NO = #{memNo}
	</update>


	<update id="updateUnliked" parameterType="hashMap">
		UPDATE LIKED
		SET
		STATUS='N'
		WHERE HB_NO = #{hbNo} AND MEM_NO = #{memNo}
	</update>

	<!-- 신고하기 -->
	<insert id="saveReport" parameterType="map"
		useGeneratedKeys="true" keyProperty="rpNo" keyColumn="RP_NO">
		INSERT INTO
		REPORT(
		RP_NO,
		HB_NO,
		MEM_NO,
		MEM_ID,
		RP_TITLE,
		RP_CONTENT,
		RP_DATE,
		STATUS
		)
		VALUES (
		SEQ_REPORT_NO.NEXTVAL,
		#{hbNo},
		#{rpWriterNo},
		#{rpWriterId},
		DEFAULT,
		#{rpContent},
		DEFAULT,
		DEFAULT
		)
	</insert>



	<!-- 문의 및 답글 -->

	<!-- Qna -->
	<sql id="qnaListSql">
		SELECT
		Q.QNA_NO,
		Q.HB_NO,
		H.HB_TITLE,
		Q.MEM_NO,
		M.MEM_ID,
		Q.QNA_TITLE,
		Q.QNA_CONTENT,
		Q.STATUS,
		Q.QNA_DATE,
		Q.QNA_SECURE
		FROM QNA Q
		JOIN HOBBY H ON(Q.HB_NO = H.HB_NO)
		JOIN MEMBER M ON(Q.MEM_NO = M.MEM_NO)
		
	</sql>

	<resultMap type="Qna" id="qnaListResultMap">
		<id property="qnaNo" column="QNA_NO" />
		<result property="hbNo" column="HB_NO" />
		<result property="hbTitle" column="HB_TITLE" />
		<result property="memNo" column="MEM_NO" />
		<result property="memId" column="MEM_ID" />
		<result property="qnaTitle" column="QNA_TITLE" />
		<result property="qnaContent" column="QNA_CONTENT" />
		<result property="status" column="STATUS" />
		<result property="qnaDate" column="QNA_DATE" />
		<result property="qnaSecure" column="QNA_SECURE" />
	</resultMap>

<insert id="insertQna" parameterType="map"
    useGeneratedKeys="true" keyProperty="qnaNo" keyColumn="QNA_NO">
    INSERT INTO QNA(
    QNA_NO,
    HB_NO,
    MEM_NO,
    QNA_TITLE,
    QNA_CONTENT,
    STATUS,
    QNA_DATE,
    QNA_SECURE)
    VALUES(
    SEQ_QNA_NO.NEXTVAL,
    #{hbNo},
    #{memNo},
    #{qnaTitle},
    #{qnaContent},
    DEFAULT,
    DEFAULT,
    #{qnaSecure}
    )
    
    </insert>


	<select id="selectQnaCount" resultType="_int">
		SELECT COUNT(*)
		FROM QNA
		WHERE HB_NO = #{hbNo}
	</select>

	<select id="selectQnaList" resultMap="qnaListResultMap">
		<include refid="qnaListSql"></include>
		WHERE Q.HB_NO = #{hbNo}
		ORDER BY Q.QNA_NO DESC
	</select>


	<select id="selectHobbyByNoQna" parameterType="_int"
		resultMap="HobbyListResultMap">
		<include refid="HobbyListSql" />
		AND HB_NO=#{hbNo}
	</select>

	<select id="selectQnaByNo" parameterType="_int" 
	resultMap="qnaListResultMap">
		<include refid="qnaListSql" />
		WHERE Q.QNA_NO=#{qnaNo}
	
	</select>
	
	<update id="updateQna" parameterType="map">
		UPDATE QNA
		SET
		QNA_TITLE=#{qnaTitle},
		QNA_CONTENT=#{qnaContent},
		QNA_DATE=SYSDATE,
		QNA_SECURE=#{qnaSecure}
		WHERE
		QNA_NO = #{qnaNo}
	</update>
	
	<update id="deleteQna" parameterType="map">
		UPDATE QNA
		SET
		STATUS = 'N'
		WHERE QNA_NO =#{qnaNo}
	
	</update>


	<!-- Reply -->

	<sql id="replyList">
		SELECT
		R.REPLY_NO,
		R.QNA_NO,
		R.MER_NO,
		R.REPLY_CONTENT,
		R.REPLAY_DATE
		FROM REPLY R
		JOIN MERCHANT M ON(R.MER_NO = M.MER_NO)
	</sql>
	
	<resultMap type="Reply" id="ReplyListResultMap">
		<id property="replyNo" column="REPLY_NO" />
		<result property="qnaNo" column="QNA_NO" />
		<result property="merNo" column="MER_NO" />
		<result property="replyContent" column="REPLY_CONTENT" />
		<result property="replayDate" column="REPLAY_DATE" />
	</resultMap>

	<select id="selectReplyCount" parameterType="_int">
		SELECT COUNT(*)
		FROM
		REPLY
		WHERE QNA_NO =#{qnaNo}
	</select>

	<select id="selectReplyList" resultMap="ReplyListResultMap"
		parameterType="_int">
		<include refid="replyList" />
		WHERE R.QNA_NO = #{qnaNo}
		ORDER BY R.QNA_NO DESC
	</select>



	<insert id="saveReply" parameterType="map"
		useGeneratedKeys="true" keyProperty="replyNo" keyColumn="REPLY_NO">
		INSERT INTO
		REPLY(
		REPLY_NO,
		QNA_NO,
		MER_NO,
		REPLY_CONTENT,
		REPLAY_DATE
		)VALUES(
		SEQ_REPLY_NO.NEXTVAL,
		#{qnaNo},
		1,
		#{replyContent},
		DEFAULT
		)
	</insert>


</mapper>