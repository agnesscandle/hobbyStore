<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kh.mvc.hobby.model.mapper.HobbyMapper">


	<!-- 취미 시작 -->

	<sql id="HobbyListSql">
		SELECT HB_NO,
		MER_NO,
		CATE_NO,
		HB_TITLE,
		HB_SUMMARY,
		HB_STARTDATE,
		HB_FEE,
		HB_DISCOUNT_RATE,
		HB_DISCOUNT_STATUS,
		HB_ENDDATE,
		HB_IMGS_ORI,
		HB_IMGS_RENAME,
		HB_THUM_ORI,
		HB_THUM_RENAME,
		HB_DETAIL_ORI,
		HB_DETAIL_RENAME,
		HB_DETAIL_INFO,
		HB_INFO,
		HB_LOCATION
		FROM HOBBY
		WHERE
		STATUS = 'Y'
	</sql>

	<sql id="cateListSql">
		SELECT
		CATE_NO,
		CATE_NAME
		FROM
		CATEGORY
	</sql>

	<sql id="ReviewListSql">
		SELECT R.RV_NO,
		R.HB_NO,
		R.MEM_NO,
		M.MEM_NAME,
		M.MEM_IMG_RENAME,
		R.RV_SCORE,
		R.RV_CONTENT,
		R.RV_CREATEDATE,
		R.RV_MODIFYDATE,
		R.GOOD_REVIEW,
		R.RV_ORIGINAL_FILENAME,
		R.RV_RENAME_FILENAME
		FROM REVIEW R
		JOIN MEMBER M ON(R.MEM_NO = M.MEM_NO)
		WHERE R.STATUS = 'Y'
	</sql>

	<sql id="MerchantListSql">
       SELECT  
       MER_NO, 
       MER_ID, 
       MER_PASSWORD, 
       MER_EMAIL,
       MER_NAME, 
       MER_PHONE,
       MER_DATE,
       BANK,
       MER_NICK, 
       STATUS, 
       MER_IMG_ORIGINAL, 
       MER_IMG_RENAME, 
       MER_IDCARD,
       CATE_NO ,
       GREETING
      FROM MERCHANT
      WHERE STATUS = 'Y'
   </sql>
	
	<sql id="ReserveListSql">
		SELECT 
		RES_NO, 
		HB_NO, 
		MEM_NO, 
		RES_NAME, 
		RES_PHONE, 
		RES_COUNT, 
		RES_DATE, 
		TAKE_DATE, 
		PAY_FEE, 
		RES_ATTEND, 
		RES_STATUS, 
		PAY_STATUS 
		FROM RESERVE
		WHERE RES_STATUS = 'Y'
	</sql>
	
	<sql id="qnaListSql">
		SELECT
		Q.QNA_NO,
		Q.HB_NO,
		H.HB_TITLE,
		Q.MEM_NO,
		M.MEM_ID,
		Q.QNA_TITLE,
		Q.QNA_CONTENT,
		Q.STATUS,
		Q.QNA_DATE,
		Q.QNA_SECURE
		FROM QNA Q
		JOIN HOBBY H ON(Q.HB_NO = H.HB_NO)
		JOIN MEMBER M ON(Q.MEM_NO = M.MEM_NO)
	</sql>
	
	<sql id="replyList">
		SELECT
		R.REPLY_NO,
		R.QNA_NO,
		R.MER_NO,
		M.MER_ID,
		R.REPLY_CONTENT,
		R.REPLAY_DATE
		FROM REPLY R
		JOIN MERCHANT M ON(R.MER_NO = M.MER_NO)
	</sql>

	<!--  resultMap -->

	<resultMap type="Hobby" id="HobbyListResultMap">
		<id property="hbNo" column="HB_NO" />
		<result property="merNo" column="MER_NO" />
		<result property="cateNo" column="CATE_NO" />
		<result property="cateName" column="CATE_NAME" />
		<result property="hbTitle" column="HB_TITLE" />
		<result property="hbSummary" column="HB_SUMMARY" />
		<result property="hbFee" column="HB_FEE" />
		<result property="hbDiscountRate" column="HB_DISCOUNT_RATE" />
		<result property="hbDiscountStatus" column="HB_DISCOUNT_STATUS" />
		<result property="hbStartDate" column="HB_STARTDATE" />
		<result property="hbEndDate" column="HB_ENDDATE" />
		<result property="hbImgsOri" column="HB_IMGS_ORI" />
		<result property="hbImgsRename" column="HB_IMGS_RENAME" />
		<result property="hbThumOri" column="HB_THUM_ORI" />
		<result property="hbThumRename" column="HB_THUM_RENAME" />
		<result property="hbDetailOri" column="HB_DETAIL_ORI" />
		<result property="hbDetailRename" column="HB_DETAIL_RENAME" />
		<result property="hbDetailInfo" column="HB_DETAIL_INFO" />
		<result property="hbInfo" column="HB_INFO" />
		<result property="hbLocation" column="HB_LOCATION" />
	</resultMap>


	<!-- 취미 목록 검색 -->

	<resultMap type="Review" id="ReviewListResultMap">
		<id property="rvNo" column="RV_NO" />
		<result property="hbNo" column="HB_NO" />
		<result property="memNo" column="MEM_NO" />
		<result property="memName" column="MEM_NAME" />
		<result property="memImgRename" column="MEM_IMG_RENAME" />
		<result property="rvScore" column="RV_SCORE" />
		<result property="rvContent" column="RV_CONTENT" />
		<result property="rvCreateDate" column="RV_CREATEDATE" />
		<result property="rvModifyDate" column="RV_MODIFYDATE" />
		<result property="goodReview" column="GOOD_REVIEW" />
		<result property="rvOriginalFilename"
			column="RV_ORIGINAL_FILENAME" />
		<result property="rvRenameFilename" column="RV_RENAME_FILENAME" />
	</resultMap>

	<resultMap type="Category" id="CateListResultMap">
		<id property="cateNo" column="CATE_NO" />
		<result property="cateName" column="CATE_NAME" />
	</resultMap>


	<resultMap type="Merchant" id="MerchantListResultMap">
       <id property="merNo" column="MER_NO"/>
       <result property="merId" column="MER_ID" />
       <result property="merPassword" column="MER_PASSWORD"/>
       <result property="merEmail" column="MER_EMAIL"/>
       <result property="merName" column="MER_NAME"/>
       <result property="merPhone" column="MER_PHONE"/>
       <result property="merDate" column="MER_DATE"/>
       <result property="bank" column="BANK"/>
       <result property="merNick" column="MER_NICK"/>
       <result property="status" column="STATUS"/>
       <result property="merImgOriginal" column="MER_IMG_ORIGINAL"/>
       <result property="merImgRename" column="MER_IMG_RENAME"/>
       <result property="merIDCARD" column="MER_IDCARD"/>
       <result property="cateNo" column="CATE_NO"/>
       <result property="greeting" column="GREETING"/>
    </resultMap>
	
	<resultMap type="Reserve" id="ReserveListResultMap">
		<id property="" column="RES_NO"/>
		<result property="hbNo" column="HB_NO" />
		<result property="memNo" column="MEM_NO" />
		<result property="resName" column="RES_NAME" />
		<result property="resPhone" column="RES_PHONE" />
		<result property="resCount" column="RES_COUNT" />
		<result property="resDate" column="RES_DATE" />
		<result property="takeDate" column="TAKE_DATE" />
		<result property="payFee" column="PAY_FEE" />
		<result property="resAttend" column="RES_ATTEND" />
		<result property="resStatus" column="RES_STATUS" />
		<result property="payStatus" column="PAY_STATUS" />
	</resultMap>
	
	<resultMap type="Reply" id="ReplyListResultMap">
		<id property="replyNo" column="REPLY_NO" />
		<result property="qnaNo" column="QNA_NO" />
		<result property="merNo" column="MER_NO" />
		<result property="merId" column="MER_ID" />
		<result property="replyContent" column="REPLY_CONTENT" />
		<result property="replayDate" column="REPLAY_DATE" />
	</resultMap>
	
	<resultMap type="Qna" id="qnaListResultMap">
		<id property="qnaNo" column="QNA_NO" />
		<result property="hbNo" column="HB_NO" />
		<result property="hbTitle" column="HB_TITLE" />
		<result property="memNo" column="MEM_NO" />
		<result property="memId" column="MEM_ID" />
		<result property="qnaTitle" column="QNA_TITLE" />
		<result property="qnaContent" column="QNA_CONTENT" />
		<result property="status" column="STATUS" />
		<result property="qnaDate" column="QNA_DATE" />
		<result property="qnaSecure" column="QNA_SECURE" />
	</resultMap>
	
	
	<select id="selectCateList" parameterType="map"
		resultMap="CateListResultMap">

		<include refid="cateListSql" />

		ORDER BY CATE_NO DESC
	</select>

	<select id="selectCateNameByNo" parameterType="_int"
		resultType="String">
			SELECT CATE_NAME
			FROM CATEGORY
			WHERE CATE_NO=#{cateNo}
	</select>
	
	

	<select id="selectHobbyList" parameterType="map"
		resultMap="HobbyListResultMap">

		SELECT H.HB_NO,
		H.MER_NO,
		H.CATE_NO,
		C.CATE_NAME,
		H.HB_TITLE,
		H.HB_SUMMARY,
		H.HB_STARTDATE,
		H.HB_FEE,
		H.HB_DISCOUNT_RATE,
		H.HB_DISCOUNT_STATUS,
		H.HB_ENDDATE,
		H.HB_IMGS_ORI,
		H.HB_IMGS_RENAME,
		H.HB_THUM_ORI,
		H.HB_THUM_RENAME,
		H.HB_INFO,
		H.HB_LOCATION
		FROM HOBBY H
		JOIN CATEGORY C ON(H.CATE_NO = C.CATE_NO)
		WHERE H.STATUS = 'Y'

		ORDER BY
		H.HB_NO DESC
	</select>

	<!-- 검색어에 맞는 취미 목록 검색 -->
	<select id="getHobbySearchList" parameterType="map"
		resultMap="HobbyListResultMap">

		SELECT H.HB_NO,
		H.MER_NO,
		H.CATE_NO,
		C.CATE_NAME,
		H.HB_TITLE,
		H.HB_SUMMARY,
		H.HB_STARTDATE,
		H.HB_FEE,
		H.HB_DISCOUNT_RATE,
		H.HB_DISCOUNT_STATUS,
		H.HB_ENDDATE,
		H.HB_IMGS_ORI,
		H.HB_IMGS_RENAME,
		H.HB_THUM_ORI,
		H.HB_THUM_RENAME,
		H.HB_INFO,
		H.HB_LOCATION
		FROM HOBBY H
		JOIN CATEGORY C ON(H.CATE_NO = C.CATE_NO)
		WHERE H.STATUS = 'Y'
		AND
		H.HB_TITLE LIKE '%' || #{search} || '%'

		ORDER BY H.HB_NO DESC

	</select>

	<!-- 검색어에 맞는 취미 수 검색 -->
	<select id="selectHobbySearchCount" parameterType="String"
		resultType="_int">
		SELECT COUNT(*)
		FROM HOBBY
		WHERE STATUS='Y'
		AND HB_TITLE LIKE
		'%' || #{search} || '%'
	</select>

	<!-- 취미 수 검색 -->
	<select id="selectHobbyCount" parameterType="map"
		resultType="_int">
		SELECT COUNT(*)
		FROM HOBBY
		WHERE STATUS='Y'
	</select>

	<!-- 취미 검색 -->
	<select id="selectHobbyByNo" parameterType="_int"
		resultMap="HobbyListResultMap">
		<include refid="HobbyListSql" />
		AND HB_NO=#{hbNo}
	</select>

	<!-- 취미 등록 -->
	<insert id="insertHobby" parameterType="map"
		useGeneratedKeys="true" keyProperty="hbNo" keyColumn="HB_NO">
		INSERT INTO
		HOBBY(
		HB_NO,
		MER_NO,
		CATE_NO,
		HB_TITLE,
		HB_FEE,
		HB_DISCOUNT_RATE,
		HB_DISCOUNT_STATUS,
		HB_SUMMARY,
		HB_STARTDATE,
		HB_ENDDATE,
		HB_IMGS_ORI,
		HB_IMGS_RENAME,
		HB_THUM_ORI,
		HB_THUM_RENAME,
		HB_DETAIL_ORI,
		HB_DETAIL_RENAME,
		HB_DETAIL_INFO,
		HB_INFO,
		HB_LOCATION,
		STATUS
		)
		VALUES(
		SEQ_HOBBY_NO.NEXTVAL,
		#{merNo},
		#{cateNo},
		#{hbTitle},
		TO_NUMBER(#{hbFee}),
		TO_NUMBER(#{hbDiscountRate}),
		#{hbDiscountStatus},
		#{hbSummary},
		TO_DATE(#{hbStartDate},'YYYY-MM-DD'),
		TO_DATE(#{hbEndDate},'YYYY-MM-DD'),
		#{hbImgsOri},
		#{hbImgsRename},
		#{hbThumOri},
		#{hbThumRename},
		#{hbDetailOri},
		#{hbDetailRename},
		#{hbDetailInfo},
		#{hbInfo},
		#{hbLocation},
		'Y'
		)
	</insert>

	<!-- 취미 끝 -->


	<!-- 리뷰 검색[김예원] -->
	<select id="selectReviewByNo" parameterType="map"
		resultMap="ReviewListResultMap">
		<include refid="ReviewListSql" />
		AND R.MEM_NO = ${memNo}
		AND R.HB_NO = ${hbNo}
	</select>

	<!-- 리뷰 목록 검색[김예원] -->
	<select id="selectReviewList" parameterType="_int"
		resultMap="ReviewListResultMap">
		<include refid="ReviewListSql" />
		AND R.HB_NO = ${hbNo}
		ORDER BY R.RV_NO DESC
	</select>

	<!-- 리뷰 수 검색[김예원] -->
	<select id="selectReviewCount" parameterType="_int"
		resultType="_int">
		SELECT COUNT(*)
		FROM REVIEW
		WHERE STATUS='Y'
		AND HB_NO =
		${hbNo}
	</select>

	<!-- 리뷰 등록 -->
	<insert id="insertReview" parameterType="map"
		useGeneratedKeys="true" keyProperty="rvNo" keyColumn="RV_NO">
		INSERT INTO
		REVIEW(
		RV_NO,
		HB_NO,
		MEM_NO,
		RV_SCORE,
		RV_CONTENT,
		RV_CREATEDATE,
		RV_MODIFYDATE,
		GOOD_REVIEW,
		RV_ORIGINAL_FILENAME,
		RV_RENAME_FILENAME,
		STATUS
		)
		VALUES(
		SEQ_REVIEW_NO.NEXTVAL,
		#{hbNo},
		#{memNo},
		#{rvScore},
		#{rvContent},
		DEFAULT,
		DEFAULT,
		DEFAULT,
		#{rvOriginalFilename},
		#{rvRenameFilename},
		'Y'
		)
	</insert>

	<!-- 리뷰 수정[김예원] -->
	<update id="updateReview" parameterType="map">
		UPDATE REVIEW
		SET
		RV_CONTENT=#{rvContent},
		RV_SCORE=#{rvScore},
		<if test="rvOriginalFilename != null">
			RV_ORIGINAL_FILENAME = #{rvOriginalFilename},
		</if>
		<if test="rvRenameFilename != null">
			RV_RENAME_FILENAME = #{rvRenameFilename},
		</if>
		RV_MODIFYDATE = DEFAULT
		WHERE
		RV_NO=#{rvNo}
	</update>

	<!-- 리뷰 삭제[김예원] -->
	<delete id="deleteReview">
		DELETE FROM REVIEW
		WHERE RV_NO = #{rvNo}
	</delete>

	<!-- 도움돼요 +1 -->
	<update id="updateGoodReview" parameterType="_int">
		UPDATE REVIEW
		SET
		GOOD_REVIEW = GOOD_REVIEW +1
		WHERE
			RV_NO = #{rvNo}
	</update>
	
	<select id="selectGoodReviewCount" parameterType="_int" resultType="_int">
		SELECT GOOD_REVIEW
		FROM REVIEW
		WHERE RV_NO = #{rvNo}
	</select>


	<!-- 리뷰 끝 -->



	<!-- 좋아요 -->
	<select id="selectLikedStatusByNo" parameterType="hashMap"
		resultType="String">
		SELECT STATUS FROM LIKED
		WHERE HB_NO = #{hbNo} AND MEM_NO =
		#{memNo}
	</select>


	<insert id="insertLiked" parameterType="map"
		useGeneratedKeys="true" keyProperty="likedNo" keyColumn="LIKE_NO">

		INSERT INTO
		LIKED(
		LIKE_NO,
		HB_NO,
		MEM_NO,
		STATUS
		) VALUES (
		SEQ_LIKE_SEQ.NEXTVAL,
		#{hbNo},
		#{memNo},
		DEFAULT
		)
	</insert>

	<update id="updateLiked" parameterType="hashMap">
		UPDATE LIKED
		SET
		STATUS='Y'
		WHERE HB_NO = #{hbNo} AND MEM_NO = #{memNo}
	</update>


	<update id="updateUnliked" parameterType="hashMap">
		UPDATE LIKED
		SET
		STATUS='N'
		WHERE HB_NO = #{hbNo} AND MEM_NO = #{memNo}
	</update>
	<!--  좋아요 끝 -->




	<!-- 신고하기 시작 -->
	<!--  신고하기 글 등록 -->
	<insert id="saveReport" parameterType="map"
		useGeneratedKeys="true" keyProperty="rpNo" keyColumn="RP_NO">
		INSERT INTO
		REPORT(
		RP_NO,
		HB_NO,
		MEM_NO,
		MEM_ID,
		RP_TITLE,
		RP_CONTENT,
		RP_DATE,
		STATUS
		)
		VALUES (
		SEQ_REPORT_NO.NEXTVAL,
		#{hbNo},
		#{rpWriterNo},
		#{rpWriterId},
		DEFAULT,
		#{rpContent},
		DEFAULT,
		DEFAULT
		)
	</insert>







	<!-- 문의 및 답글 -->

	<!-- Qna -->

	<insert id="insertQna" parameterType="map"
		useGeneratedKeys="true" keyProperty="qnaNo" keyColumn="QNA_NO">
		INSERT INTO QNA(
		QNA_NO,
		HB_NO,
		MEM_NO,
		QNA_TITLE,
		QNA_CONTENT,
		STATUS,
		QNA_DATE,
		QNA_SECURE)
		VALUES(
		SEQ_QNA_NO.NEXTVAL,
		#{hbNo},
		#{memNo},
		#{qnaTitle},
		#{qnaContent},
		DEFAULT,
		DEFAULT,
		#{qnaSecure}
		)

	</insert>


	<select id="selectQnaCount" resultType="_int">
		SELECT COUNT(*)
		FROM QNA
		WHERE HB_NO = #{hbNo}
	</select>

	<select id="selectQnaList" resultMap="qnaListResultMap">
		<include refid="qnaListSql"></include>
		WHERE Q.HB_NO = #{hbNo}
		AND Q.STATUS = 'Y'
		ORDER BY Q.QNA_NO DESC
	</select>


	<select id="selectHobbyByNoQna" parameterType="_int"
		resultMap="HobbyListResultMap">
		<include refid="HobbyListSql" />
		AND HB_NO=#{hbNo}
	</select>

	<select id="selectQnaByNo" parameterType="_int"
		resultMap="qnaListResultMap">
		<include refid="qnaListSql" />
		WHERE Q.QNA_NO=#{qnaNo}

	</select>

	<update id="updateQna" parameterType="map">
		UPDATE QNA
		SET
		QNA_TITLE=#{qnaTitle},
		QNA_CONTENT=#{qnaContent},
		QNA_DATE=SYSDATE,
		QNA_SECURE=#{qnaSecure}
		WHERE
		QNA_NO = #{qnaNo}
	</update>

	<update id="deleteQna" parameterType="map">
		UPDATE QNA
		SET
		STATUS = 'N'
		WHERE QNA_NO =#{qnaNo}

	</update>



	<!-- Reply -->
	<select id="selectReplyCount" parameterType="_int">
		SELECT COUNT(*)
		FROM
		REPLY
		WHERE QNA_NO =#{qnaNo}
	</select>

	<select id="selectReplyList" resultMap="ReplyListResultMap"
		parameterType="_int">
		<include refid="replyList" />
		WHERE R.QNA_NO = #{qnaNo}
		ORDER BY R.QNA_NO DESC
	</select>



<select id="selectReplyByNo" parameterType="_int"
		resultMap="ReplyListResultMap">
		<include refid="replyList" />
		WHERE R.REPLY_NO=#{replyNo}

	</select>

<!-- 
	<select id="selectReplyCount" parameterType="map"
			resultType="_int">
			SELECT COUNT(*)
			FROM REPLY
			WHERE QNA_NO = ${qnaNo}
			AND
			MER_NO = ${merNo}
	</select>
 -->
	<!-- merInfo -->	
	<!--  상인 정보보기 -->
	<select id="selectMerInfoByNo" parameterType="_int" resultMap="MerchantListResultMap">
		<include refid="MerchantListSql" />
			AND MER_NO=#{merNo}
	</select>
	
	
	
	<!-- Reserve & Pay -->
	<!--  결제하기 -->
	<insert id="saveReserve" parameterType="map"
		useGeneratedKeys="true" keyProperty="resNo" keyColumn="RES_NO">
			INSERT INTO 
			RESERVE(
				RES_NO, 
				HB_NO, 
				MEM_NO, 
				RES_NAME, 
				RES_PHONE, 
				RES_COUNT, 
				RES_DATE, 
				TAKE_DATE, 
				PAY_FEE, 
				RES_ATTEND, 
				RES_STATUS,
				CAL_STATUS
			) VALUES (
				SEQ_RESERVE_NO.NEXTVAL, 
				#{hbNo}, 
				#{memNo}, 
				#{resName}, 
				#{resPhone}, 
				DEFAULT,
				SYSDATE,
				TO_DATE(#{takeDate},'YYYY-MM-DD'),
				TO_NUMBER(#{payFee}),
				DEFAULT, 
				DEFAULT,
				DEFAULT
			)
	</insert>
	
	<!--  결제 개수 세기 -->
	<select id="selectReserveCount" parameterType="map"
		resultType="_int">
		SELECT COUNT(*)
		FROM RESERVE
		WHERE HB_NO = ${hbNo}
		AND
		MEM_NO = ${memNo}
	</select>
	
	<!--  결제 끝 -->
	<!--  네비 : 카테고리  -->
	<!--  카테고리 번호에 해당하는 취미 개수 -->
	<select id="selectHobbyCountByCateNo" parameterType="_int" resultType="_int">
		SELECT COUNT(*)
		FROM HOBBY
		WHERE STATUS = 'Y'
		AND CATE_NO = #{cateNo}
	</select>
	
	<!--  카테고리 번호에 해당하는 취미 목록 -->
	<select id="getHobbyListByCateNo" parameterType="map" resultMap="HobbyListResultMap">
		SELECT H.HB_NO,
		H.MER_NO,
		H.CATE_NO,
		C.CATE_NAME,
		H.HB_TITLE,
		H.HB_SUMMARY,
		H.HB_STARTDATE,
		H.HB_FEE,
		H.HB_DISCOUNT_RATE,
		H.HB_DISCOUNT_STATUS,
		H.HB_ENDDATE,
		H.HB_IMGS_ORI,
		H.HB_IMGS_RENAME,
		H.HB_THUM_ORI,
		H.HB_THUM_RENAME,
		H.HB_INFO,
		H.HB_LOCATION
		FROM HOBBY H
		JOIN CATEGORY C ON(H.CATE_NO = C.CATE_NO)
		WHERE H.STATUS = 'Y'
		AND
		H.CATE_NO = #{cateNo}

		ORDER BY H.HB_NO DESC
	</select>
	
	


	<select id="selectReserveList" parameterType="map"
		resultMap="ReserveListResultMap">
		<include refid="ReserveListSql" /> 
		ORDER BY
		RES_DATE DESC
	</select>


</mapper>